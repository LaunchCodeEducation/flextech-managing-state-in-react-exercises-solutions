Part 1: Setting Up a Basic Vite React App

Before we begin with the exercises, let's set up a basic React application using Vite. Vite is a modern frontend build tool that provides a 
faster and leaner development experience for modern web projects. 
It uses its own dev server rather than webpack-dev-server. However, it supports the same functionalities and is compatible with React.

Step 1: Install Node.js

Ensure you have Node.js installed on your system. You can download it from Node.js Official Website.

Step 2: Create a New Vite Project

Open your terminal and run the following command:

```
npm init vite@latest my-react-app -- --template react
```

This command initializes a new Vite project with the React template.

Step 3: Navigate to the Project Directory
```
cd my-react-app

```

Step 4: Install Dependencies

```
npm install

```

Step 5: Run the Development Server

```
npm run dev

```

This will start the Vite development server. You can view your app at http://localhost:3000.


Directory Structure:

Your project structure should look like this:

```
my-react-app/
├── index.html
├── package.json
├── src/
│   ├── App.jsx
│   ├── main.jsx
│   └── index.css
├── vite.config.js
└── node_modules/
```

Part 2: 25 React Exercises to Add to the Vite App

Below are 25 React exercises covering various concepts. Each exercise includes a description and code snippets that you can add to your Vite React app.


Exercise 1: Managing State with useState
Description: Create a simple counter component that increments and decrements a number using the useState hook.
Answer:

```
// src/components/Counter.jsx
import React, { useState } from 'react';

function Counter() {
  const [count, setCount] = useState(0);

  return (
    <div>
      <h2>Counter: {count}</h2>
      <button onClick={() => setCount(count + 1)}>Increment</button>
      <button onClick={() => setCount(count - 1)}>Decrement</button>
    </div>
  );
}

export default Counter;

```

Usage in App.jsx:
```
// src/App.jsx
import React from 'react';
import Counter from './components/Counter';

function App() {
  return (
    <div>
      <Counter />
    </div>
  );
}

export default App;

```

Exercise 2: Handling Derived State
Description: Create a component that calculates and displays the square of a number stored in state.
Answer:

```
// src/components/SquareCalculator.jsx
import React, { useState } from 'react';

function SquareCalculator() {
  const [number, setNumber] = useState(0);

  const square = number * number;

  return (
    <div>
      <h2>Number: {number}</h2>
      <h2>Square: {square}</h2>
      <input
        type="number"
        value={number}
        onChange={(e) => setNumber(parseInt(e.target.value) || 0)}
      />
    </div>
  );
}

export default SquareCalculator;

```

Exercise 3: Using useEffect for Side Effects
Description: Create a component that fetches data from a mock API when it mounts and displays it.

Answer:

```
// src/components/DataFetcher.jsx
import React, { useState, useEffect } from 'react';

function DataFetcher() {
  const [data, setData] = useState(null);

  useEffect(() => {
    // Mock API call
    fetch('https://jsonplaceholder.typicode.com/posts/1')
      .then((response) => response.json())
      .then((json) => setData(json))
      .catch((error) => console.error('Error fetching data:', error));
  }, []);

  if (!data) return <div>Loading...</div>;

  return (
    <div>
      <h2>{data.title}</h2>
      <p>{data.body}</p>
    </div>
  );
}

export default DataFetcher;

```

Exercise 4: Creating a Custom Hook
Description: Create a custom hook useWindowWidth that returns the current width of the browser window.
Answer:
```
// src/hooks/useWindowWidth.js
import { useState, useEffect } from 'react';

function useWindowWidth() {
  const [width, setWidth] = useState(window.innerWidth);

  useEffect(() => {
    const handleResize = () => setWidth(window.innerWidth);

    window.addEventListener('resize', handleResize);

    // Cleanup
    return () => window.removeEventListener('resize', handleResize);
  }, []);

  return width;
}

export default useWindowWidth;

```

Usage in a component:

```
// src/components/WindowWidthDisplay.jsx
import React from 'react';
import useWindowWidth from '../hooks/useWindowWidth';

function WindowWidthDisplay() {
  const width = useWindowWidth();

  return <div>Window width: {width}px</div>;
}

export default WindowWidthDisplay;

```

Exercise 5: Implementing an Error Boundary
Description: Create an error boundary component to catch errors in child components.
Then, wrap the DataFetcher component in this new Error Boundary component.
Then from within DataFetcher right before the return, throw an error with the message
"Data Fetcher failed!"
Answer:

```
// src/components/ErrorBoundary.jsx
import React from 'react';

class ErrorBoundary extends React.Component {
  constructor(props) {
    super(props);
    this.state = { hasError: false };
  }

  static getDerivedStateFromError(error) {
    // Update state to show fallback UI
    return { hasError: true };
  }

  componentDidCatch(error, errorInfo) {
    // Log error
    console.error('ErrorBoundary caught an error', error, errorInfo);
  }

  render() {
    if (this.state.hasError) {
      // Fallback UI
      return <h1>Something went wrong.</h1>;
    }

    return this.props.children;
  }
}

export default ErrorBoundary;

```

Usage in App.jsx:
```
// src/App.jsx
import React from 'react';
import ErrorBoundary from './components/ErrorBoundary';
import FaultyComponent from './components/FaultyComponent';

function App() {
  return (
    <ErrorBoundary>
      <FaultyComponent />
    </ErrorBoundary>
  );
}

export default App;

```

Faulty component to test Error Boundary:
```
// src/components/FaultyComponent.jsx
import React from 'react';

function FaultyComponent() {
  throw new Error('I crashed!');
  return <div>This will not render.</div>;
}

export default FaultyComponent;

```

Exercise 6: Setting Up Routing with React Router
Description: Install react-router-dom and set up basic routing in the app.
Answer:

Install React Router:
```
npm install react-router-dom

```

Update main.jsx to include the router:

```
// src/main.jsx
import React from 'react';
import ReactDOM from 'react-dom/client';
import App from './App';
import { BrowserRouter } from 'react-router-dom';
import './index.css';

ReactDOM.createRoot(document.getElementById('root')).render(
  <BrowserRouter>
    <App />
  </BrowserRouter>
);

```

Exercise 7: Declaring Routes and Using Link for Navigation
Description: Create multiple pages and set up navigation using Link.
Answer:

Create pages:
```
// src/pages/Home.jsx
import React from 'react';

function Home() {
  return <h2>Home Page</h2>;
}

export default Home;

// src/pages/About.jsx
import React from 'react';

function About() {
  return <h2>About Page</h2>;
}

export default About;

```

Update App.jsx to include routes:

```
// src/App.jsx
import React from 'react';
import { Routes, Route, Link } from 'react-router-dom';
import Home from './pages/Home';
import About from './pages/About';

function App() {
  return (
    <div>
      <nav>
        <Link to="/">Home</Link> | <Link to="/about">About</Link>
      </nav>
      <hr />
      <Routes>
        <Route path="/" element={<Home />} />
        <Route path="/about" element={<About />} />
      </Routes>
    </div>
  );
}

export default App;

```

Exercise 8: Using URL Parameters with useParams
Description: Create a dynamic route that displays user profiles based on a user ID from the URL.
Answer:

Create a User Profile page:

```
// src/pages/UserProfile.jsx
import React from 'react';
import { useParams } from 'react-router-dom';

function UserProfile() {
  const { userId } = useParams();

  return <h2>User Profile for User ID: {userId}</h2>;
}

export default UserProfile;

```

Update App.jsx to include the dynamic route:

```
// src/App.jsx
import React from 'react';
import { Routes, Route, Link } from 'react-router-dom';
import Home from './pages/Home';
import About from './pages/About';
import UserProfile from './pages/UserProfile';

function App() {
  return (
    <div>
      <nav>
        <Link to="/">Home</Link> | <Link to="/about">About</Link> |{' '}
        <Link to="/user/1">User 1</Link>
      </nav>
      <hr />
      <Routes>
        <Route path="/" element={<Home />} />
        <Route path="/about" element={<About />} />
        <Route path="/user/:userId" element={<UserProfile />} />
      </Routes>
    </div>
  );
}

export default App;

```

Exercise 9: Handling 404 Pages
Description: Create a component to display when no route matches (a "Not Found" page).
Answer:

Create a NotFound page:

```
// src/pages/NotFound.jsx
import React from 'react';

function NotFound() {
  return <h2>404 - Page Not Found</h2>;
}

export default NotFound;

```

Update App.jsx to include a wildcard route:
```
// src/App.jsx
import React from 'react';
import { Routes, Route, Link } from 'react-router-dom';
import Home from './pages/Home';
import About from './pages/About';
import UserProfile from './pages/UserProfile';
import NotFound from './pages/NotFound';

function App() {
  return (
    <div>
      {/* ...previous code... */}
      <Routes>
        {/* ...previous routes... */}
        <Route path="*" element={<NotFound />} />
      </Routes>
    </div>
  );
}

export default App;

```


Exercise 10: Programmatic Navigation with useNavigate
Description: Use the useNavigate hook to navigate programmatically after a button click.
Answer:

```
// src/components/NavigationButton.jsx
import React from 'react';
import { useNavigate } from 'react-router-dom';

function NavigationButton() {
  const navigate = useNavigate();

  const goToAbout = () => {
    navigate('/about');
  };

  return <button onClick={goToAbout}>Go to About Page</button>;
}

export default NavigationButton;

```

Usage in Home.jsx:

```
// src/pages/Home.jsx
import React from 'react';
import NavigationButton from '../components/NavigationButton';

function Home() {
  return (
    <div>
      <h2>Home Page</h2>
      <NavigationButton />
    </div>
  );
}

export default Home;

```

Exercise 11: Handling Form Submissions
Description: Create a simple form component that handles form submission and displays the submitted data.
Answer:

```
// src/components/SimpleForm.jsx
import React, { useState } from 'react';

function SimpleForm() {
  const [inputValue, setInputValue] = useState('');
  const [submittedValue, setSubmittedValue] = useState('');

  const handleSubmit = (e) => {
    e.preventDefault();
    setSubmittedValue(inputValue);
    setInputValue('');
  };

  return (
    <div>
      <h2>Simple Form</h2>
      <form onSubmit={handleSubmit}>
        <input
          type="text"
          value={inputValue}
          onChange={(e) => setInputValue(e.target.value)}
          placeholder="Enter something"
        />
        <button type="submit">Submit</button>
      </form>
      {submittedValue && <p>You submitted: {submittedValue}</p>}
    </div>
  );
}

export default SimpleForm;

```

Usage in App.jsx or any page:

```
import SimpleForm from './components/SimpleForm';

// In your component's render:
<SimpleForm />

```

Exercise 12: Using React's Synthetic Event System
Description: Explain how React's synthetic events work and create a component that logs event details on button clicks.
Answer:

React uses a synthetic event system that wraps native browser events to provide consistent behavior across different browsers.

Example Component:

```
// src/components/EventLogger.jsx
import React from 'react';

function EventLogger() {
  const handleClick = (e) => {
    console.log('Event type:', e.type);
    console.log('Button clicked:', e.target);
  };

  return <button onClick={handleClick}>Log Event Details</button>;
}

export default EventLogger;

```

Exercise 13: Fetching Data with Async/Await
Description: Fetch data from an API using async/await and display it.
Answer:

```
// src/components/AsyncDataFetcher.jsx
import React, { useState, useEffect } from 'react';

function AsyncDataFetcher() {
  const [data, setData] = useState(null);

  useEffect(() => {
    const fetchData = async () => {
      try {
        // Mock API call
        const response = await fetch('https://jsonplaceholder.typicode.com/posts/2');
        const json = await response.json();
        setData(json);
      } catch (error) {
        console.error('Error fetching data:', error);
      }
    };

    fetchData();
  }, []);

  if (!data) return <div>Loading...</div>;

  return (
    <div>
      <h2>{data.title}</h2>
      <p>{data.body}</p>
    </div>
  );
}

export default AsyncDataFetcher;

```

Exercise 14: Handling Loading States and Errors
Description: Enhance the previous data-fetching component to handle loading states and errors.
Answer:

```
// src/components/EnhancedDataFetcher.jsx
import React, { useState, useEffect } from 'react';

function EnhancedDataFetcher() {
  const [data, setData] = useState(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  useEffect(() => {
    const fetchData = async () => {
      setLoading(true);
      try {
        // Intentional error for demonstration
        const response = await fetch('https://jsonplaceholder.typicode.com/invalid-url');
        if (!response.ok) {
          throw new Error('Network response was not ok');
        }
        const json = await response.json();
        setData(json);
      } catch (error) {
        setError(error.message);
      }
      setLoading(false);
    };

    fetchData();
  }, []);

  if (loading) return <div>Loading data...</div>;
  if (error) return <div>Error: {error}</div>;
  if (!data) return null;

  return (
    <div>
      <h2>{data.title}</h2>
      <p>{data.body}</p>
    </div>
  );
}

export default EnhancedDataFetcher;

```


Exercise 15: Using a Mock API
Description: Set up a mock API using json-server and fetch data from it.
Answer:

Install json-server:

```
npm install -g json-server

```

Create a db.json file in the project root:

```
{
  "posts": [
    { "id": 1, "title": "Mock Post 1", "body": "This is a mock post." },
    { "id": 2, "title": "Mock Post 2", "body": "Another mock post." }
  ]
}

```

Run the mock server:

```
json-server --watch db.json --port 3001

```

Update the data-fetching component to use the mock API:

```
// src/components/MockDataFetcher.jsx
import React, { useState, useEffect } from 'react';

function MockDataFetcher() {
  const [data, setData] = useState(null);

  useEffect(() => {
    fetch('http://localhost:3001/posts/1')
      .then((response) => response.json())
      .then((json) => setData(json))
      .catch((error) => console.error('Error fetching mock data:', error));
  }, []);

  if (!data) return <div>Loading mock data...</div>;

  return (
    <div>
      <h2>{data.title}</h2>
      <p>{data.body}</p>
    </div>
  );
}

export default MockDataFetcher;

```

Exercise 16: Optimizing with useCallback
Description: Use useCallback to memoize event handlers and prevent unnecessary re-renders.
Answer:

```
// src/components/CallbackDemo.jsx
import React, { useState, useCallback } from 'react';

function Button({ handleClick, label }) {
  console.log(`Rendering button: ${label}`);
  return <button onClick={handleClick}>{label}</button>;
}

const MemoizedButton = React.memo(Button);

function CallbackDemo() {
  const [count, setCount] = useState(0);

  const increment = useCallback(() => setCount((c) => c + 1), []);
  const decrement = useCallback(() => setCount((c) => c - 1), []);

  return (
    <div>
      <h2>Count: {count}</h2>
      <MemoizedButton handleClick={increment} label="Increment" />
      <MemoizedButton handleClick={decrement} label="Decrement" />
    </div>
  );
}

export default CallbackDemo;

```

Exercise 17: Optimizing with useMemo
Description: Use useMemo to memoize expensive calculations.
Answer:

```
// src/components/MemoizationDemo.jsx
import React, { useState, useMemo } from 'react';

function MemoizationDemo() {
  const [number, setNumber] = useState(0);
  const [toggle, setToggle] = useState(true);

  const expensiveCalculation = (num) => {
    console.log('Calculating...');
    // Simulate heavy computation
    for (let i = 0; i < 1000000000; i++) {}
    return num * 2;
  };

  const calculatedValue = useMemo(() => expensiveCalculation(number), [number]);

  return (
    <div>
      <h2>Calculated Value: {calculatedValue}</h2>
      <input
        type="number"
        value={number}
        onChange={(e) => setNumber(parseInt(e.target.value) || 0)}
      />
      <button onClick={() => setToggle(!toggle)}>Toggle: {toggle.toString()}</button>
    </div>
  );
}

export default MemoizationDemo;

```

Exercise 18: Creating a Data Fetching Custom Hook
Description: Create a custom hook useFetch to centralize data-fetching logic.
Answer:

```
// src/hooks/useFetch.js
import { useState, useEffect } from 'react';

function useFetch(url) {
  const [data, setData] = useState(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  useEffect(() => {
    setLoading(true);
    fetch(url)
      .then((response) => {
        if (!response.ok) {
          throw new Error('Error fetching data.');
        }
        return response.json();
      })
      .then((json) => {
        setData(json);
        setError(null);
      })
      .catch((err) => setError(err.message))
      .finally(() => setLoading(false));
  }, [url]);

  return { data, loading, error };
}

export default useFetch;

```

Usage in a component:

```
// src/components/CustomHookDemo.jsx
import React from 'react';
import useFetch from '../hooks/useFetch';

function CustomHookDemo() {
  const { data, loading, error } = useFetch('https://jsonplaceholder.typicode.com/posts/3');

  if (loading) return <div>Loading data...</div>;
  if (error) return <div>Error: {error}</div>;
  if (!data) return null;

  return (
    <div>
      <h2>{data.title}</h2>
      <p>{data.body}</p>
    </div>
  );
}

export default CustomHookDemo;

```

Exercise 19: Centralizing Data Fetching with Custom Hooks
Description: Explain the benefits of using custom hooks like useFetch for data fetching.
Answer:

Benefits:

Reusability: Custom hooks allow you to reuse data-fetching logic across multiple components.
Clean Code: Keeps components cleaner by abstracting complex logic.
Maintainability: Easier to update data-fetching logic in one place.
Testability: Custom hooks can be tested independently from components.


Exercise 20: Preventing Unnecessary Re-renders
Description: Demonstrate how to prevent unnecessary re-renders using React.memo.
Answer:

```
// src/components/DisplayValue.jsx
import React from 'react';

function DisplayValue({ value }) {
  console.log('DisplayValue rendered');
  return <div>Value: {value}</div>;
}

export default React.memo(DisplayValue);

// src/components/PreventReRendersDemo.jsx
import React, { useState } from 'react';
import DisplayValue from './DisplayValue';

function PreventReRendersDemo() {
  const [value, setValue] = useState(0);
  const [otherState, setOtherState] = useState(false);

  return (
    <div>
      <DisplayValue value={value} />
      <button onClick={() => setValue(value + 1)}>Increment Value</button>
      <button onClick={() => setOtherState(!otherState)}>
        Toggle Other State: {otherState.toString()}
      </button>
    </div>
  );
}

export default PreventReRendersDemo;

```

Exercise 21: Using useReducer for State Management
Description: Implement a counter using the useReducer hook.
Answer:

```
// src/components/ReducerCounter.jsx
import React, { useReducer } from 'react';

function ReducerCounter() {
  const initialState = 0;

  const reducer = (state, action) => {
    switch (action) {
      case 'increment':
        return state + 1;
      case 'decrement':
        return state - 1;
      case 'reset':
        return initialState;
      default:
        return state;
    }
  };

  const [count, dispatch] = useReducer(reducer, initialState);

  return (
    <div>
      <h2>Count: {count}</h2>
      <button onClick={() => dispatch('increment')}>Increment</button>
      <button onClick={() => dispatch('decrement')}>Decrement</button>
      <button onClick={() => dispatch('reset')}>Reset</button>
    </div>
  );
}

export default ReducerCounter;

```

Exercise 22: Debouncing Input with useEffect
Description: Implement an input field that debounces the user input before making an API call.
Answer:

```
// src/components/DebouncedInput.jsx
import React, { useState, useEffect } from 'react';

function DebouncedInput() {
  const [inputValue, setInputValue] = useState('');
  const [debouncedValue, setDebouncedValue] = useState(inputValue);

  useEffect(() => {
    const handler = setTimeout(() => setDebouncedValue(inputValue), 500);

    return () => {
      clearTimeout(handler);
    };
  }, [inputValue]);

  useEffect(() => {
    if (debouncedValue) {
      // Make API call with debouncedValue
      console.log('Making API call with:', debouncedValue);
    }
  }, [debouncedValue]);

  return (
    <div>
      <h2>Debounced Input</h2>
      <input
        type="text"
        value={inputValue}
        onChange={(e) => setInputValue(e.target.value)}
        placeholder="Type to search"
      />
      <p>Debounced Value: {debouncedValue}</p>
    </div>
  );
}

export default DebouncedInput;

```

Exercise 23: Throttling Scroll Events
Description: Implement a component that logs the scroll position, throttled to once every 500ms.
Answer:

```
// src/components/ThrottledScrollLogger.jsx
import React, { useEffect } from 'react';

function ThrottledScrollLogger() {
  useEffect(() => {
    let lastScrollTime = 0;

    const handleScroll = () => {
      const now = Date.now();
      if (now - lastScrollTime >= 500) {
        console.log('Scroll position:', window.scrollY);
        lastScrollTime = now;
      }
    };

    window.addEventListener('scroll', handleScroll);

    return () => window.removeEventListener('scroll', handleScroll);
  }, []);

  return <div style={{ height: '200vh' }}>Scroll to see the effect</div>;
}

export default ThrottledScrollLogger;

```

Exercise 24: Implementing Infinite Scroll
Description: Create a component that loads more data as the user scrolls to the bottom.
Answer:

```
// src/components/InfiniteScrollList.jsx
import React, { useState, useEffect } from 'react';

function InfiniteScrollList() {
  const [items, setItems] = useState(Array.from({ length: 20 }));
  const [loading, setLoading] = useState(false);

  useEffect(() => {
    const handleScroll = () => {
      if (
        window.innerHeight + document.documentElement.scrollTop !==
          document.documentElement.offsetHeight ||
        loading
      )
        return;

      setLoading(true);
    };

    window.addEventListener('scroll', handleScroll);

    return () => window.removeEventListener('scroll', handleScroll);
  }, [loading]);

  useEffect(() => {
    if (!loading) return;

    // Simulate fetching data
    setTimeout(() => {
      setItems((prev) => [...prev, ...Array.from({ length: 20 })]);
      setLoading(false);
    }, 1000);
  }, [loading]);

  return (
    <div>
      <h2>Infinite Scroll List</h2>
      <ul>
        {items.map((_, index) => (
          <li key={index}>Item #{index + 1}</li>
        ))}
      </ul>
      {loading && <p>Loading more items...</p>}
    </div>
  );
}

export default InfiniteScrollList;

```

Exercise 25: Using React.Fragment and Short Syntax
Description: Explain and demonstrate the use of React.Fragment and its shorthand syntax.
Answer:

Explanation:

React.Fragment allows grouping a list of children elements without adding extra nodes to the DOM.
The shorthand syntax is <>...</>.
Example Component:

```
// src/components/FragmentDemo.jsx
import React from 'react';

function FragmentDemo() {
  return (
    <>
      <h2>Fragment Demo</h2>
      <p>This component uses a fragment.</p>
    </>
  );
}

export default FragmentDemo;

```

Usage in App.jsx:

```
import FragmentDemo from './components/FragmentDemo';

// In your component's render:
<FragmentDemo />

```


Conclusion

These exercises cover various aspects of React, including state management, routing, event handling, 
data fetching, performance optimization, and custom hooks. By implementing these exercises in your Vite app, 
you will gain practical experience and deepen your understanding of React's core concepts.

Feel free to modify the code, experiment with additional features, and explore further to enhance your learning experience.

Note: Ensure that you import and export components correctly and that your file paths are accurate when adding these exercises to your Vite app. 
Also, remember to handle any potential errors and edge cases as you implement these components.